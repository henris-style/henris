// Context Management
// ==================



// Context [variable]
// ------------------
/// Stores the current module/test/assertion context stack
/// @access private
/// @group private-context
/// @type list
$_true-context: ();



// Context [mixin]
// ---------------
/// Update the current context for a given scope
/// @access private
/// @group private-context
/// @param {string} $scope -
///   Either `module`, `test` or `assert`
/// @param {string} $name -
///   Name or description of the current scope
@mixin _true-context(
  $scope,
  $name
) {
  $_true-context: append($_true-context, ($scope, $name)) !global;
}



// Context Pop [mixin]
// -------------------
/// Remove the deepest context layer from `$_true-context`
/// @access private
/// @group private-context
@mixin _true-context-pop {
  $new: ();

  @for $i from 1 to length($_true-context) {
    $new: append($new, nth($_true-context, $i));
  }

  $_true-context: $new !global;
}



// Output-context [variable]
// -------------------------
/// Make sure every output test
/// includes an `assert`, `output`, and `expect`/`contains`
/// @access private
/// @group private-context
/// @type list
$_true-output-context: ();



// Output-context [mixin]
// ----------------------
/// Add `assert`, `output`, `expect`, or `contains` context to an output test,
/// or check to make sure they all exist before resetting the context.
/// @access private
/// @group private-context
/// @param {'assert' | 'output' | 'expect' | 'contains' | null} $new -
///   Add a new `assert`, `output`, `expect`, or `contains` layer
///   to the context of an output-test,
///   or use `null` to check that all context is properly formed
///   and then reset it at the end of a test
/// @param {list} $context [$_true-output-context] -
///   The current output context
@mixin _true-output-context(
  $new,
  $context: $_true-output-context
) {
  $valid: 'assert' 'expect' 'output' 'contains';

  $_true-output-context: _true-validate-output-context($new, $context) !global;
}


// Validate Output-context [function]
// ----------------------------------
/// Validate the new context, and return an updated context value
/// @access private
/// @group private-context
/// @param {'assert' | 'output' | 'expect' | 'contains' | null} $new -
///   Add a new `assert`, `output`, `expect`, or `contains` layer
///   to the context of an output-test,
///   or use `null` to check that all context is properly formed
///   and then reset it at the end of a test
/// @param {list} $context [$_true-output-context] -
///   The current output context
/// @return {list} Updated output context
/// @throw When adding unknown context
/// @throw When trying to add context that already exists
/// @throw When `assert()` is missing before `expect`, `output`, or `contains`
/// @throw When context is missing before a reset
@function _true-validate-output-context(
  $new,
  $context: $_true-output-context
) {
  $valid: 'assert' 'expect' 'output' 'contains';

  @if $new and not (index($valid, $new)) {
    $error: '#{$new} is not a valid context for output tests: #{$valid}';
    @return _true-error($error, 'output-context');
  } @else if index($context, $new) {
    @if ($new == 'assert') {
      $error: 'The `assert()` mixin can not contain another `assert()`';
      @return _true-error($error, 'output-context');
    }

    $error: 'The `#{$new}()` mixin must only be used once per `assert()`';
    @return _true-error($error, 'output-context');
  } @else if $new {
    $is-sub: index('expect' 'output' 'contains', $new);

    @if $is-sub and not index($context, 'assert') {
      $error: 'The `assert()` wrapper is required';
      @return _true-error($error, 'output-context');
    }

    @return append($context, $new);
  }

  $length: length($context);
  $has-expect: index($context, 'expect') or index($context, 'contains');
  $has-both: index($context, 'output') and ($has-expect);

  @if ($length != 3) or (not $has-both) {
    $required: 'one `output()`, and one `expect()` or `contains()`';
    $error: 'Each `assert()` must contain #{$required}';
    @return _true-error($error, 'output-context');
  }

  @return ();
}


// Context [function]
// ------------------
/// Get information on current context for a given scope
/// @access private
/// @group private-context
/// @param {string} $scope
/// @return {string}
@function _true-context(
  $scope
) {
  $value: null;

  @each $entry-scope, $entry-value in $_true-context {
    @if $entry-scope == $scope {
      $value: $entry-value;
    }
  }

  @return $value;
}



// Context All [function]
// ----------------------
/// Get list of context names for a given scope
/// @access private
/// @group private-context
/// @param {string} $scope
/// @return {list}
@function _true-context-all(
  $scope
) {
  $list: ();

  @each $entry-scope, $entry-value in $_true-context {
    @if $entry-scope == $scope {
      $list: append($list, $entry-value);
    }
  }

  @return $list;
}
