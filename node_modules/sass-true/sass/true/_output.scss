// Test Result Output
// ==================


// Pass Details
// ------------
/// Ouptut a success message for passing tests
/// @access private
/// @group private-assert
/// @output -
///   a passing-test comment with the name of the passing assertion
@mixin _true-pass-details {
  $assertion: _true-context('assert');
  @include _true-message('✔ #{$assertion}', 'comments', 2);
}


// Fail Details
// ------------
/// Failure message, with appropriate details
/// to help you debug various common problems.
/// @access private
/// @group private-assert
/// @param {*} $assert - The assertion value
/// @param {*} $expected - The expected value
/// @param {bool} $terminal [$true-terminal-output] -
///   whether to use the terminal as an output stream
@mixin _true-fail-details(
  $assert,
  $expected,
  $terminal: $true-terminal-output
) {
  $location: if($terminal, ('comments', 'debug'), 'comments');

  // Title Messages
  $assertion: _true-context('assert');
  $title: 'FAILED: #{$assertion}';
  @include _true-message('✖ #{$title}', $location, 2);


  // Details Message
  $out: _true-variable-details($assert);
  $exp: _true-variable-details($expected);
  $details: ('- Output: #{$out}', '- Expected: #{$exp}');
  @include _true-message($details, $location, 4);


  // Edge Failure Notes
  @if str-index($assertion, 'assert-equal') {
    $notes: _true-edgefail-notes($assert, $expected);
    @if $notes {
      @include _true-message($notes, $location, 4);
    }
  }


  // Context Message
  $module: _true-context('module');
  $test: _true-context('test');
  $context: ('- Module: #{$module}', '- Test: #{$test}');
  @include _true-message($context, $location, 4);


  // Terminal Warning
  @if $terminal {
    @include _true-message($assertion, 'warn');
  }
}


// Variable Details
// ----------------
/// Provide the details (type, list-separator, quotation)
/// for a given variable -
/// used to provide context in failure reporting
/// @access private
/// @group private-assert
/// @param {*} $var -
///   Pass in asserted and expected values individually
///   to retrieve comparable details for both
@function _true-variable-details(
  $var
) {
  $inspect: inspect($var);
  $type: type-of($var);

  @if $type == 'list' {
    $type: '#{list-separator($var)}-#{$type}';
  }

  @if ($type == 'string') and ($var != unquote($var)) {
    $type: 'quoted-#{$type}';
  }

  @return '[#{$type}] #{$inspect}';
}


// EdgeFail Notes
// --------------
/// There are some common test failures that can be confusing,
/// where results look identical in the output,
/// but represent different values internally.
/// This function looks for those edge-case failures
/// and adds a clarifying note in the results.
/// @access private
/// @group private-assert
/// @param {*} $one - One of the values being compared
/// @param {*} $two - The other calue being compared
/// @return {null | string} -
///   A helpful note related to your edge-case, when appropriate
@function _true-edgefail-notes(
  $one,
  $two
) {
  $one-type: type-of($one);
  $two-type: type-of($two);

  $note: null;
  $pre: '- Details: ';
  $inspect: '(set `$inspect: true` to compare output values)';


  // List Separators
  @if ($one-type == 'list') and ($two-type == 'list')  {
    @if (join((), $one, comma) == join((), $two, comma)) {
      $message: 'list-separators do not match';
      $note: $pre + $message;
    }
  }


  // String Quotes
  @if ($one-type == 'string') and ($two-type == 'string')  {
    @if (unquote($one) == unquote($two)) {
      $message: 'string quotations do not match';
      $note: $pre + $message;
    }
  }

  $one: if(($one-type == 'string'), unquote($one), $one);
  $two: if(($two-type == 'string'), unquote($two), $two);

  @if (inspect($one) == inspect($two)) {
    // Type
    @if ($one-type != $two-type) {
      $message: 'variable types do not match';
      $note: $pre + $message + ' ' + $inspect;
    }

    // Rounding
    $number: ($one-type == 'number') and ($two-type == 'number');
    $color: ($one-type == 'color') and ($two-type == 'color');

    @if ($number or $color) {
      $type: if($number, 'numbers', 'colors');
      $message: '#{$type} may need to be rounded before comparison';
      $note: $pre + $message + ' ' + $inspect;
    }

    // Catch-All (I think this may not be currently possible)
    @if (not $note) {
      $note: $pre + $inspect;
    }
  }

  @return $note;
}
